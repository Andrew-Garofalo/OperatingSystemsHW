//*********************
//** Andrew Garofalo **
//** HW#4 Problem 2  **
//**   ag4-2.cm      **
//*********************

const int DELAY = 10;

void Delay (void)
{
    int i;
    int DelayTime;
    DelayTime = random (DELAY);
    for (i = 0; i < DelayTime; i++);
}

// Define an enum to represent water levels within the lock.
typedef int LockWaterLevel;
const LockWaterLevel LOW = 0;
const LockWaterLevel HIGH = 1;

// Define an enum for the occupancy status of the lock.
typedef int LockOccupancy;
const LockOccupancy DOWNGOINGBARGE = -1; // The lock contains a barge headed downstream.
const LockOccupancy NOBARGE = 0;         // The lock does not contain a barge.
const LockOccupancy UPGOINGBARGE = 1;    // The lock contains a barge headed upstream.

// Define booleans.
typedef int bool;
const bool false = 0;
const bool true = 1;

// Defines a max priority with which a process can wait in the monitor.
const int MAX_PRIORITY = 1000000; // One million.

// DIAGRAM:
//
//
// UPSTREAM SIDE OF LOCK       LOCK       DOWNSTREAM SIDE OF LOCK
//
//                      GATE1        GATE2
//~~~~~~~~~~~~~~~~~~~~~~~~||           ||
//                        ||~~~~~~~~~~~||
//        (WATER)         ||           ||~~~~~~~~~~~~~~~~~~~~~~~~~
//________________________||  (WATER)  ||         (WATER)
//########################||___________||_________________________
//################################################################

monitor Lock
{
    // State Variables:
    LockWaterLevel waterLevel; // Keeps track of the current water level inside the lock.
    LockOccupancy lockOccupancy; // Keeps track of the occupancy status of the lock.

    // Condition Variables:
    condition Gate1; // A queue for requests to open GATE1.
    condition Gate2; // A queue for requests to open GATE2.
    condition MakeDecision; // Signal this to awaken the lock operator who will change the water level.

    void enterFromUpstream(int bargeId)
    {
        // A decision must be made about the water level.
        // Wake up the lock operator.
        signalc(MakeDecision);

        // Get in line for upper gate.
        // Make sure not to take the first spot in line since that spot
        // is reserved for barges INSIDE the lock.
        cout << "Upstream Barge #" << bargeId << " is approaching Gate1." << endl;
        waitc(Gate1, MAX_PRIORITY - bargeId);

        // Enter the lock.
        lockOccupancy = DOWNGOINGBARGE;

        cout << "Upstream Barge #" << bargeId << " is in the lock, "
             << "and is heading DOWNSTREAM." << endl;

        // The lock operator is gonna need to change the water level.
        signalc(MakeDecision);

        // Wait for the lower gate to be opened.
        // This request has highest priority!
        cout << "Upstream Barge #" << bargeId << " has entered the lock and is waiting." << endl;
        waitc(Gate2, MAX_PRIORITY);

        // Exit the lock.
        cout << "Upstream Barge #" << bargeId << " is exiting the lock." << endl;
        cout << "Gate 2 is closing behind Upstream Barge #" << bargeId << "." << endl;
        lockOccupancy = NOBARGE;
    }

    void enterFromDownstream(int bargeId)
    {
        // A decision must be made about the water level.
        // Wake up the lock operator.
        signalc(MakeDecision);

        // Get in line for lower gate.
        // Make sure not to take the first spot in line since that spot
        // is reserved for barges INSIDE the lock.
        cout << "Downstream Barge #" << bargeId << " is approaching Gate2." << endl;
        waitc(Gate2, MAX_PRIORITY - bargeId);

        // Enter the lock.
        lockOccupancy = UPGOINGBARGE;

        cout << "Downstream Barge #" << bargeId << " is in the lock, "
             << "and is heading UPSTREAM." << endl;

        // The lock operator is gonna need to change the water level.
        signalc(MakeDecision);

        // Wait for the upper gate to be opened.
        // This request has highest priority!
        cout << "Downstream Barge #" << bargeId << " has entered the lock and is waiting." << endl;
        waitc(Gate1, MAX_PRIORITY);

        // Exit the lock.
        cout << "Downstream Barge #" << bargeId << " is exiting the lock." << endl;
        cout << "Gate 1 is closing behind Downstream Barge #" << bargeId << "." << endl;
        lockOccupancy = NOBARGE;
    }

    // Simulates the technician in charge of raising and lower the water level in the lock.
    void lockOperator()
    {
        int i;
        for (i = 0; i < 80; i++) {

            // Wait until the operator is needed.
            cout << "Lock operator is waiting." << endl;
            waitc(MakeDecision);
            
            // If no barge is currently in the lock...
            if (lockOccupancy == NOBARGE) {

                // ...we will decide who to let in based on the current water level.
                if (waterLevel == HIGH) {

                    // If a barge is waiting to enter the lock from upstream...
                    if (!empty(Gate1)) { 

                        // ...simple: let them enter.
                        cout << "Opening Gate1 to let upstream barge into the lock." << endl;
                        signalc(Gate1);

                        // Note: this barge has priority in this case since the water
                        //       level is already high.

                    } else if (!empty(Gate2)) { // Otherwise, somebody must want in at the lower gate.
                        
                        // We must lower the water level first...
                        cout << "Lowering water level so that downstream barge can enter lock." << endl;
                        Delay();
                        waterLevel = LOW;
                        
                        // ...then let them enter.
                        cout << "Opening Gate2 to let downstream barge into the lock." << endl;
                        signalc(Gate2);

                    } // else can't happen.

                } else if (waterLevel == LOW) {
                    
                    // If a barge is waiting to enter the lock at Gate2...
                    if (!empty(Gate2)) { 

                        // ...simple: let them enter.
                        cout << "Opening Gate2 to let downstream barge into the lock." << endl;
                        signalc(Gate2);

                        // Note: this barge has priority in this case since the water
                        //       level is already low.

                    } else if (!empty(Gate1)) { // Otherwise, somebody must want in at Gate1.
                        
                        // We must raise the water level first...
                        cout << "Raising water level so that upstream barge can enter lock." << endl;
                        Delay();
                        waterLevel = HIGH;
                        
                        // ...then let them enter.
                        cout << "Opening Gate1 to let upstream barge into the lock." << endl;
                        signalc(Gate1);

                    } // else can't happen.

                }

            // If a barge heading DOWNSTREAM is in the lock...
            // [SEE NOTE 1 BELOW]
            } else if (lockOccupancy == DOWNGOINGBARGE) {

                // ...we need to lower the water level...
                cout << "Lowering water level to let barge out of lock." << endl;
                Delay();
                waterLevel = LOW;

                // ...and then open the lower gate.
                signalc(Gate2);

            // If a barge heading UPSTREAM is in the lock...
            // [SEE NOTE 1 BELOW]
            } else if (lockOccupancy == UPGOINGBARGE) {

                // ...we need to raise the water level...
                cout << "Raising water level to let barge out of lock." << endl;
                Delay();
                waterLevel = HIGH;

                // ...and then open the upper gate.
                signalc(Gate1);

            }

            // NOTE 1:
            //      When a barge from UPSTREAM enters the lock, it will immediately
            //      begin waiting on the LOWER gate. Also, the water level WILL be
            //      HIGH since the barge just opened the upper gate.
            //
            //      This means that when a barge is in the lock, and the operator is
            //      signalled, the water level MUST be toggeled (if HIGH then made
            //      LOW, if LOW then made HIGH).
        }
    }

    // Initialize the monitor.
    init
    {
        waterLevel = LOW; // Or HIGH, doesn't matter.
        lockOccupancy = NOBARGE;
    }
}

//////////////////////////////////////////////////////////////

// This process simply runs the lock operator.
void WaterLevel()
{
    lockOperator();
}

// Simulates 5 different barges that originate from the upstream
// side of the lock.
void UpStream(int idOffset)
{
    int i;
    for (i = 0; i < 5; i++) {
        enterFromUpstream(i*16 + idOffset);
    }
}

// Simulates 5 different barges that originate from the downstream
// side of the lock.
void DownStream(int idOffset)
{
    int i;
    for (i = 0; i < 5; i++) {
        enterFromDownstream(i*16 + idOffset);
    }
}

//////////////////////////////////////////////////////////////

main()
{
    cobegin {
        WaterLevel();

        UpStream(1);
        UpStream(2);
        UpStream(3);
        UpStream(4);
        UpStream(5);
        UpStream(6);
        UpStream(7);
        UpStream(8);

        DownStream(9);
        DownStream(10);
        DownStream(11);
        DownStream(12);
        DownStream(13);
        DownStream(14);
        DownStream(15);
        DownStream(16);
    }
}
